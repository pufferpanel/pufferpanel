name: Release
on:
  workflow_dispatch:
    inputs:
      repo:
        description: 'What repo to push to'
        required: false
        default: 'pufferpanel/pufferpanel'
      branch:
       description: 'Tag or other branch to pull artifacts from'
       required: false
       default: 'master'

concurrency:
  group: release
  cancel-in-progress: true
        
jobs:
  deploy:
    runs-on: ubuntu-20.04
    name: "Deployment"
    
    steps:
    - uses: ruby/setup-ruby@v1
      with:
        ruby-version: 2.6 # Not needed with a .ruby-version file
    
    - name: Install gems
      run: |
        gem install --no-doc package_cloud
    
    - name: Download AMD64 ZIP artifact
      id: linuxamd64zipdownload
      uses: pufferpanel/download-artifacts@v1
      with:
        workflow-id: 'build.yml'
        extract: 'false'
        artifact-name: 'pufferpanel_*_linux_amd64'
        authToken: ${{ secrets.GITHUB_TOKEN }}
        branch: ${{ github.event.inputs.branch }}
        
    - name: Download AMD64 ZIP artifact
      id: windowsamd64zipdownload
      uses: pufferpanel/download-artifacts@v1
      with:
        workflow-id: 'build.yml'
        extract: 'false'
        artifact-name: 'pufferpanel_*_windows_amd64'
        authToken: ${{ secrets.GITHUB_TOKEN }}
        branch: ${{ github.event.inputs.branch }}
        
    - name: Download ARMHF ZIP artifact
      id: armhfzipdownload
      uses: pufferpanel/download-artifacts@v1
      with:
        workflow-id: 'build.yml'
        extract: 'false'
        artifact-name: 'pufferpanel_*_armhf'
        authToken: ${{ secrets.GITHUB_TOKEN }}
        branch: ${{ github.event.inputs.branch }}
        
    - name: Download ARM64 ZIP artifact
      id: arm64zipdownload
      uses: pufferpanel/download-artifacts@v1
      with:
        workflow-id: 'build.yml'
        extract: 'false'
        artifact-name: 'pufferpanel_*_arm64'
        authToken: ${{ secrets.GITHUB_TOKEN }}
        branch: ${{ github.event.inputs.branch }}
    
    - name: Download AMD64 RPM artifact
      id: amd64rpmdownload
      uses: pufferpanel/download-artifacts@v1
      with:
        workflow-id: 'build.yml'
        extract: 'true'
        artifact-name: 'pufferpanel-*.x86_64.rpm'
        authToken: ${{ secrets.GITHUB_TOKEN }}
        branch: ${{ github.event.inputs.branch }}
        
    - name: Download AMD64 DEB artifact
      id: amd64debdownload
      uses: pufferpanel/download-artifacts@v1
      with:
        workflow-id: 'build.yml'
        extract: 'true'
        artifact-name: 'pufferpanel*_amd64.deb'
        authToken: ${{ secrets.GITHUB_TOKEN }}
        branch: ${{ github.event.inputs.branch }}
        
    - name: Download ARM DEB artifact
      id: armhfdebdownload
      uses: pufferpanel/download-artifacts@v1
      with:
        workflow-id: 'build.yml'
        extract: 'true'
        artifact-name: 'pufferpanel*_armhf.deb'
        authToken: ${{ secrets.GITHUB_TOKEN }}
        branch: ${{ github.event.inputs.branch }}
        
    - name: Download ARM DEB artifact
      id: arm64debdownload
      uses: pufferpanel/download-artifacts@v1
      with:
        workflow-id: 'build.yml'
        extract: 'true'
        artifact-name: 'pufferpanel*_arm64.deb'
        authToken: ${{ secrets.GITHUB_TOKEN }}
        branch: ${{ github.event.inputs.branch }}
        
    - name: Download Windows MSI artifact
      id: msidownload
      uses: pufferpanel/download-artifacts@v1
      with:
        workflow-id: 'build.yml'
        extract: 'true'
        artifact-name: 'pufferpanel*_installer.msi'
        authToken: ${{ secrets.GITHUB_TOKEN }}
        branch: ${{ github.event.inputs.branch }}

    - name: Download Swagger
      id: swagdownload
      uses: pufferpanel/download-artifacts@v1
      with:
        workflow-id: 'build.yml'
        extract: 'false'
        artifact-name: 'pufferpanel_swagger'
        authToken: ${{ secrets.GITHUB_TOKEN }}
        branch: ${{ github.event.inputs.branch }}
        
    - name: Debug list files
      run: |
        ls -l
        echo Going to grab following
        echo ${{ steps.windowsamd64zipdownload.outputs.file }}
        echo ${{ steps.linuxamd64zipdownload.outputs.file }}
        echo ${{ steps.arm64zipdownload.outputs.file }}
        echo ${{ steps.amd64debdownload.outputs.file }}
        echo ${{ steps.arm64debdownload.outputs.file }}
        echo ${{ steps.amd64rpmdownload.outputs.file }}
        echo ${{ steps.msidownload.outputs.file }}
        echo ${{ steps.swagdownload.outputs.file }}
        echo ${{ steps.windowsamd64zipdownload.outputs.file }}
        
    - name: Create Release	
      id: create_release
      uses: actions/create-release@v1.0.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}	
      with:
        tag_name: ${{ github.event.inputs.branch }}
        release_name: ${{ github.event.inputs.branch }}
        draft: false
        prerelease: false
        
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ steps.linuxamd64zipdownload.outputs.file }}.zip
        asset_name: ${{ steps.linuxamd64zipdownload.outputs.file }}.zip
        asset_content_type: application/zip
        
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ steps.windowsamd64zipdownload.outputs.file }}.zip
        asset_name: ${{ steps.windowsamd64zipdownload.outputs.file }}.zip
        asset_content_type: application/zip
        
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ steps.arm64zipdownload.outputs.file }}.zip
        asset_name: ${{ steps.arm64zipdownload.outputs.file }}.zip
        asset_content_type: application/zip
        
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ steps.amd64debdownload.outputs.file }}
        asset_name: ${{ steps.amd64debdownload.outputs.file }}
        asset_content_type: application/vnd.debian.binary-package
        
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ steps.arm64debdownload.outputs.file }}
        asset_name: ${{ steps.arm64debdownload.outputs.file }}
        asset_content_type: application/vnd.debian.binary-package

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ steps.amd64rpmdownload.outputs.file }}
        asset_name: ${{ steps.amd64rpmdownload.outputs.file }}
        asset_content_type: application/zip
        
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: pufferpanel.msi
        asset_name: ${{ steps.msidownload.outputs.file }}
        asset_content_type: application/octet-stream

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ steps.swagdownload.outputs.file }}.zip
        asset_name: ${{ steps.swagdownload.outputs.file }}.zip
        asset_content_type: application/zip
        
    - name: Push to repo
      env:
        PACKAGECLOUD_TOKEN: ${{ secrets.PACKAGECLOUD_TOKEN }}
      run: |        
        #ubuntu
        package_cloud push ${{ github.event.inputs.repo }}/ubuntu/focal ${{ steps.amd64debdownload.outputs.file }}
        package_cloud push ${{ github.event.inputs.repo }}/ubuntu/jammy ${{ steps.amd64debdownload.outputs.file }}        
        
        package_cloud push ${{ github.event.inputs.repo }}/ubuntu/focal ${{ steps.arm64debdownload.outputs.file }}
        package_cloud push ${{ github.event.inputs.repo }}/ubuntu/jammy ${{ steps.arm64debdownload.outputs.file }}   
        
        #debians
        package_cloud push ${{ github.event.inputs.repo }}/debian/buster ${{ steps.amd64debdownload.outputs.file }}
        package_cloud push ${{ github.event.inputs.repo }}/debian/bullseye ${{ steps.amd64debdownload.outputs.file }}
        
        package_cloud push ${{ github.event.inputs.repo }}/debian/buster ${{ steps.arm64debdownload.outputs.file }}
        package_cloud push ${{ github.event.inputs.repo }}/debian/bullseye ${{ steps.arm64debdownload.outputs.file }}
        
        #raspbian        
        package_cloud push ${{ github.event.inputs.repo }}/raspbian/buster ${{ steps.arm64debdownload.outputs.file }}
        package_cloud push ${{ github.event.inputs.repo }}/raspbian/bullseye ${{ steps.arm64debdownload.outputs.file }}
