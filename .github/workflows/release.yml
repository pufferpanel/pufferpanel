name: Release
on:
  workflow_dispatch:
    inputs:
      createRelease:
        description: 'Create a release?'
        required: false
        default: 'false'
      repo:
        description: 'What repo to push to'
        required: false
        default: 'pufferpanel/pufferpanel'
      branch:
       description: 'Tag or other branch to pull artifacts from'
       required: false
       default: 'master'
        
jobs:
  deploy:
    runs-on: ubuntu-20.04
    name: "Deployment"
    
    steps:
    - uses: ruby/setup-ruby@v1
      with:
        ruby-version: 2.6 # Not needed with a .ruby-version file
    
    - name: Install gems
      run:
        gem install --no-doc package_cloud
    
    - name: Download AMD64 ZIP artifact
      id: amd64zipdownload
      uses: pufferpanel/download-artifacts@v1
      with:
        workflow-id: 'build.yml'
        extract: 'false'
        artifact-name: 'pufferpanel_*_amd64.zip'
        authToken: ${{ secrets.GITHUB_TOKEN }}
        branch: ${{ github.event.inputs.branch }}
        
    - name: Download ARMHF ZIP artifact
      id: armhfzipdownload
      uses: pufferpanel/download-artifacts@v1
      with:
        workflow-id: 'build.yml'
        extract: 'false'
        artifact-name: 'pufferpanel_*_armhf.zip'
        authToken: ${{ secrets.GITHUB_TOKEN }}
        branch: ${{ github.event.inputs.branch }}
        
    - name: Download ARM64 ZIP artifact
      id: arm64zipdownload
      uses: pufferpanel/download-artifacts@v1
      with:
        workflow-id: 'build.yml'
        extract: 'false'
        artifact-name: 'pufferpanel_*_arm64.zip'
        authToken: ${{ secrets.GITHUB_TOKEN }}
        branch: ${{ github.event.inputs.branch }}
    
    - name: Download AMD64 RPM artifact
      id: amd64rpmdownload
      uses: pufferpanel/download-artifacts@v1
      with:
        workflow-id: 'build.yml'
        extract: 'true'
        artifact-name: 'pufferpanel-*.x86_64.rpm'
        authToken: ${{ secrets.GITHUB_TOKEN }}
        branch: ${{ github.event.inputs.branch }}
        
    - name: Download AMD64 DEB artifact
      id: amd64debdownload
      uses: pufferpanel/download-artifacts@v1
      with:
        workflow-id: 'build.yml'
        extract: 'true'
        artifact-name: 'pufferpanel*_amd64.deb'
        authToken: ${{ secrets.GITHUB_TOKEN }}
        branch: ${{ github.event.inputs.branch }}
        
    - name: Download ARM DEB artifact
      id: armhfdebdownload
      uses: pufferpanel/download-artifacts@v1
      with:
        workflow-id: 'build.yml'
        extract: 'true'
        artifact-name: 'pufferpanel*_armhf.deb'
        authToken: ${{ secrets.GITHUB_TOKEN }}
        branch: ${{ github.event.inputs.branch }}
        
    - name: Download ARM DEB artifact
      id: arm64debdownload
      uses: pufferpanel/download-artifacts@v1
      with:
        workflow-id: 'build.yml'
        extract: 'true'
        artifact-name: 'pufferpanel*_arm64.deb'
        authToken: ${{ secrets.GITHUB_TOKEN }}
        branch: ${{ github.event.inputs.branch }}
        
    - name: Create Release	
      id: create_release	
      if: github.event.inputs.createRelease == 'true'
      uses: actions/create-release@v1.0.0	
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}	
      with:
        tag_name: ${{ github.event.inputs.branch }}
        release_name: ${{ github.event.inputs.branch }}
        draft: true	
        prerelease: true

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1.0.1
      if: github.event.inputs.createRelease == 'true'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ steps.amd64zipdownload.outputs.file }}.zip
        asset_name: ${{ steps.amd64zipdownload.outputs.file }}.zip
        asset_content_type: application/zip

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1.0.1
      if: github.event.inputs.createRelease == 'true'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ steps.armhfzipdownload.outputs.file }}.zip
        asset_name: ${{ steps.armhfzipdownload.outputs.file }}.zip
        asset_content_type: application/zip
        
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1.0.1
      if: github.event.inputs.createRelease == 'true'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ steps.arm64zipdownload.outputs.file }}.zip
        asset_name: ${{ steps.arm64zipdownload.outputs.file }}.zip
        asset_content_type: application/zip

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1.0.1
      if: github.event.inputs.createRelease == 'true'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ steps.armhfdebdownload.outputs.file }}
        asset_name: ${{ steps.armhfdebdownload.outputs.file }}
        asset_content_type: application/vnd.debian.binary-package
        
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1.0.1
      if: github.event.inputs.createRelease == 'true'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ steps.amd64debdownload.outputs.file }}
        asset_name: ${{ steps.amd64debdownload.outputs.file }}
        asset_content_type: application/vnd.debian.binary-package
        
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1.0.1
      if: github.event.inputs.createRelease == 'true'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ steps.arm64debdownload.outputs.file }}
        asset_name: ${{ steps.arm64debdownload.outputs.file }}
        asset_content_type: application/vnd.debian.binary-package

    - name: Upload Release Asset
      if: github.event.inputs.createRelease == 'true'
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ steps.amd64rpmdownload.outputs.file }}
        asset_name: ${{ steps.amd64rpmdownload.outputs.file }}
        asset_content_type: application/zip

    - name: Push to repo
      env:
        PACKAGECLOUD_TOKEN: ${{ secrets.PACKAGECLOUD_TOKEN }}
      run: |        
        #centos
        package_cloud push ${{ github.event.inputs.repo }}/el/7 ${{ steps.amd64rpmdownload.outputs.file }}
        package_cloud push ${{ github.event.inputs.repo }}/el/8 ${{ steps.amd64rpmdownload.outputs.file }}
        
        package_cloud push ${{ github.event.inputs.repo }}/fedora/33 ${{ steps.amd64rpmdownload.outputs.file }}
        
        #ubuntu
        package_cloud push ${{ github.event.inputs.repo }}/ubuntu/bionic ${{ steps.amd64debdownload.outputs.file }}
        package_cloud push ${{ github.event.inputs.repo }}/ubuntu/cosmic ${{ steps.amd64debdownload.outputs.file }}
        package_cloud push ${{ github.event.inputs.repo }}/ubuntu/disco ${{ steps.amd64debdownload.outputs.file }}
        package_cloud push ${{ github.event.inputs.repo }}/ubuntu/eoan ${{ steps.amd64debdownload.outputs.file }}
        package_cloud push ${{ github.event.inputs.repo }}/ubuntu/focal ${{ steps.amd64debdownload.outputs.file }}
        package_cloud push ${{ github.event.inputs.repo }}/ubuntu/groovy ${{ steps.amd64debdownload.outputs.file }}
        
        package_cloud push ${{ github.event.inputs.repo }}/ubuntu/focal ${{ steps.arm64debdownload.outputs.file }}
        package_cloud push ${{ github.event.inputs.repo }}/ubuntu/groovy ${{ steps.arm64debdownload.outputs.file }}
        
        #debian
        package_cloud push ${{ github.event.inputs.repo }}/debian/jessie ${{ steps.amd64debdownload.outputs.file }}
        package_cloud push ${{ github.event.inputs.repo }}/debian/stretch ${{ steps.amd64debdownload.outputs.file }}
        package_cloud push ${{ github.event.inputs.repo }}/debian/buster ${{ steps.amd64debdownload.outputs.file }}
        package_cloud push ${{ github.event.inputs.repo }}/debian/bullseye ${{ steps.amd64debdownload.outputs.file }}
        
        #raspbian
        package_cloud push ${{ github.event.inputs.repo }}/raspbian/buster ${{ steps.armhfdebdownload.outputs.file }}
        package_cloud push ${{ github.event.inputs.repo }}/raspbian/buster ${{ steps.arm64debdownload.outputs.file }}
